package com.dacinc.security;

//JwtUserDetailsService.java
@Service
public class JwtUserDetailsService implements UserDetailsService {
 
 @Autowired
 private DealerRepository dealerRepository;
 
 @Override
 public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
     Dealer dealer = dealerRepository.findByEmail(email)
             .orElseThrow(() -> new UsernameNotFoundException("User not found with email: " + email));
     
     return new User(dealer.getEmail(), dealer.getPassword(),
             new ArrayList<>());
 }
}

//JwtTokenUtil.java
@Component
public class JwtTokenUtil implements Serializable {
 
 private static final long serialVersionUID = -2550185165626007488L;
 private static final long JWT_TOKEN_VALIDITY = 5 * 60 * 60;
 
 @Value("${jwt.secret}")
 private String secret;
 
 public String getUsernameFromToken(String token) {
     return getClaimFromToken(token, Claims::getSubject);
 }
 
 public Date getExpirationDateFromToken(String token) {
     return getClaimFromToken(token, Claims::getExpiration);
 }
 
 public <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {
     final Claims claims = getAllClaimsFromToken(token);
     return claimsResolver.apply(claims);
 }
 
 private Claims getAllClaimsFromToken(String token) {
     return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();
 }
 
 private Boolean isTokenExpired(String token) {
     final Date expiration = getExpirationDateFromToken(token);
     return expiration.before(new Date());
 }
 
 public String generateToken(UserDetails userDetails) {
     Map<String, Object> claims = new HashMap<>();
     return doGenerateToken(claims, userDetails.getUsername());
 }
 
 private String doGenerateToken(Map<String, Object> claims, String subject) {
     return Jwts.builder().setClaims(claims).setSubject(subject)
             .setIssuedAt(new Date(System.currentTimeMillis()))
             .setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000))
             .signWith(SignatureAlgorithm.HS512, secret).compact();
 }
 
 public Boolean validateToken(String token, UserDetails userDetails) {
     final String username = getUsernameFromToken(token);
     return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
 }
}

//JwtAuthenticationEntryPoint.java
@Component
public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint, Serializable {
 
 private static final long serialVersionUID = -7858869558953243875L;
 
 @Override
 public void commence(HttpServletRequest request, HttpServletResponse response,
                      AuthenticationException authException) throws IOException {
     response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");
 }
}

//JwtRequestFilter.java
@Component
public class JwtRequestFilter extends OncePerRequestFilter {
 
 @Autowired
 private JwtUserDetailsService jwtUserDetailsService;
 
 @Autowired
 private JwtTokenUtil jwtTokenUtil;
 
 @Override
 protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
         throws ServletException, IOException {
     
     final String requestTokenHeader = request.getHeader("Authorization");
     
     String username = null;
     String jwtToken = null;
     
     if (requestTokenHeader != null && requestTokenHeader.startsWith("Bearer ")) {
         jwtToken = requestTokenHeader.substring(7);
         try {
             username = jwtTokenUtil.getUsernameFromToken(jwtToken);
         } catch (IllegalArgumentException e) {
             System.out.println("Unable to get JWT Token");
         } catch (ExpiredJwtException e) {
             System.out.println("JWT Token has expired");
         }
     } else {
         logger.warn("JWT Token does not begin with Bearer String");
     }
     
     if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
         UserDetails userDetails = this.jwtUserDetailsService.loadUserByUsername(username);
         
         if (jwtTokenUtil.validateToken(jwtToken, userDetails)) {
             UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken =
                     new UsernamePasswordAuthenticationToken(
                             userDetails, null, userDetails.getAuthorities());
             usernamePasswordAuthenticationToken
                     .setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
             SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
         }
     }
     chain.doFilter(request, response);
 }
}
